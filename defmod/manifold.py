import copy

import torch
import numpy as np


class Manifold:
    def __init__(self):
        pass

    @property
    def dim_gd(self):
        raise NotImplementedError

    def action(self, module):
        raise NotImplementedError


class Landmarks(Manifold):
    def __init__(self, points):
        super().__init__()
        self.__dim_gd = points.view(-1).shape[0]

        self.__gd = points.clone().view(-1).contiguous()
        self.__mom = torch.zeros_like(self.__gd)

    @classmethod
    def build_empty(cls, dim, nb_pts):
        return cls(torch.zeros(dim, nb_pts))

    @property
    def dim_gd(self):
        return self.__dim_gd

    def __get_gd(self):
        return self.__gd

    def __get_mom(self):
        return self.__mom

    def fill_gd(self, gd):
        self.__gd = gd.clone()

    def fill_mom(self, mom):
        self.__mom = mom.clone()

    gd = property(__get_gd, fill_gd)
    mom = property(__get_mom, fill_mom)

    def muladd(self, gd, mom, scale):
        self.__gd = self.__gd + scale*gd
        self.__mom = self.__mom + scale*mom

    def action(self, module) :
        """Applies the vector field generated by the module on the landmark."""
        return module(self.gd.view(-1, self.__dim)).view(-1)


class CompoundManifold(Manifold):
    def __init__(self, manifold_list):
        self.__manifold_list = manifold_list
        self.__dim_gd = sum([m.dim_gd for m in self.__manifold_list])
        self.__indice_gd = [0]
        self.__indice_gd.extend(np.cumsum([m.dim_gd for m in self.__manifold_list]))

    @property
    def manifold_list(self):
        return self.__manifold_list

    @property
    def nb_manifold(self):
        return len(self.__nb_manifold)

    def __getitem__(self, index):
        return self.__manifold_list[index]

    @property
    def dim_gd(self):
        return self.__dim_gd

    def __get_gd(self):
        return torch.cat([m.gd for m in self.__manifold_list])

    def __get_mom(self):
        return torch.cat([m.mom for m in self.__manifold_list])

    def fill_gd(self, gd):
        assert gd.shape[0] == self.__dim_gd
        for i in range(len(self.__manifold_list)):
            self.__manifold_list[i].fill_gd(gd[self.__indice_gd[i]:self.__indice_gd[i+1]])


    def fill_mom(self, mom):
        assert mom.shape[0] == self.__dim_gd
        for i in range(len(self.__manifold_list)):
            self.__manifold_list[i].fill_mom(mom[self.__indice_gd[i]:self.__indice_gd[i+1]])

    gd = property(__get_gd, fill_gd)
    mom = property(__get_mom, fill_mom)

    def muladd(self, gd, mom, scale):
        for i in range(len(self.__manifold_list)):
            self.__module_list[i].muladd(gd[self.__indice_gd[i]:self.__indice_gd[i+1]],
                                         mom[self.__indice_gd[i]:self.__indice_gd[i+1]],
                                         scale)
            

    def action(self, module):
        actions = []
        for m in self.__manifold_list:
            actions.append(m.action(module))

        return torch.sum(actions, 0)

