import copy

import torch
import numpy as np

from .kernels import gauss_kernel, K_xx, K_xy
from .manifold import Landmarks, CompoundManifold
from .usefulfunctions import make_grad_graph

class DeformationModule(torch.nn.Module):
    """Abstract module."""
    def __init__(self):
        super().__init__()

    def copy(self):
        return copy.copy(self)

    def __call__(self, gd, controls, points):
        """Applies the generated vector field on given points."""
        raise NotImplementedError

    def action(self, gd, module, gd_module, controls_module):
        """Applies the vector field generated by Mod on GD"""
        raise NotImplementedError

    def cost(self, gd, controls):
        """Returns the cost."""
        raise NotImplementedError


class Translations(DeformationModule):
    """Module generating sum of translations."""
    def __init__(self, manifold, sigma):
        super().__init__()
        self.__manifold = manifold
        self.__sigma = sigma
        self.__dim_controls = self.__manifold.dim*self.__manifold.nb_pts
        self.__controls = torch.zeros(self.__dim_controls)

    @classmethod
    def build_empty(cls, dim, nb_pts, sigma):
        return cls(Landmarks.build_empty(dim, nb_pts), sigma)

    @property
    def manifold(self):
        return self.__manifold

    @property
    def sigma(self):
        return self.__sigma

    @property
    def dim_controls(self):
        return self.__dim_controls

    def __get_controls(self):
        return self.__controls

    def fill_controls(self, controls):
        self.__controls = controls

    controls = property(__get_controls, fill_controls)

    def __call__(self, points):
        """Applies the generated vector field on given points."""
        K_q = K_xy(points, self.manifold.gd.view(-1, self.__manifold.dim), self.__sigma)
        return torch.mm(K_q, self.__controls.view(-1, self.__manifold.dim))

    def cost(self):
        """Returns the cost."""
        K_q = K_xx(self.manifold.gd.view(-1, self.__manifold.dim), self.__sigma)
        m = torch.mm(K_q, self.controls.view(-1, self.__manifold.dim))
        return 0.5*torch.dot(m.view(-1), self.__controls.view(-1))

    def compute_geodesic_control(self, delta):
        """Computes geodesic control from \delta \in H^\ast."""
        K_q = K_xx(self.manifold.gd.view(-1, self.__manifold.dim), self.__sigma)
        controls, _ = torch.gesv(delta.view(-1, self.__manifold.dim), K_q)
        self.controls = controls.contiguous().view(-1)


class SilentPoints(DeformationModule):
    """Module handling silent points."""
    def __init__(self, manifold):
        super().__init__()
        self.__manifold = manifold        

    @property
    def dim_controls(self):
        return 0

    @property
    def manifold(self):
        return self.__manifold

    def __get_controls(self):
        return torch.tensor([])

    def fill_controls(self, controls):
        pass

    controls = property(__get_controls, fill_controls)

    def __call__(self, points):
        """Applies the generated vector field on given points."""
        return torch.zeros_like(points)

    def cost(self):
        """Returns the cost."""
        return torch.tensor(0.)

    def compute_geodesic_control(self, delta):
        """Computes geodesic control from \delta \in H^\ast."""
        pass


class CompoundModule(DeformationModule):
    """Combination of modules."""
    def __init__(self, module_list):
        super().__init__()
        self.__module_list = list(module_list)
        self.__nb_module = len(module_list)
        self.__dim_controls = sum([mod.dim_controls for mod in module_list])
        self.__indice_controls = [0]
        self.__indice_controls.extend(np.cumsum([m.dim_controls for m in self.__module_list]))

    @property
    def module_list(self):
        return self.__module_list

    def __getitem__(self, index):
        return self.__module_list[index]

    @property
    def nb_module(self):
        return self.__nb_module

    @property
    def dim_controls(self):
        return self.__dim_controls

    def __get_controls(self):
        return torch.cat([m.controls for m in self.__module_list])

    def fill_controls(self, controls):
        for i in range(self.__nb_module):
            self.__module_list[i].fill_controls(
                controls[self.__indice_controls[i]:self.__indice_controls[i+1]])

    controls = property(__get_controls, fill_controls)

    @property
    def indice_controls(self):
        return self.__indice_controls

    @property
    def manifold(self):
        return CompoundManifold([m.manifold for m in self.__module_list])

    def __call__(self, points) :
        """Applies the generated vector field on given points."""
        app_list = []
        for m in self.__module_list:
            app_list.append(m(points))

        return sum(app_list).view(-1, self.manifold.dim)

    def cost(self):
        """Returns the cost."""
        cost_list = []
        for m in self.__module_list:
            cost_list.append(m.cost())

        return sum(cost_list)

    def compute_geodesic_control(self, delta):
        """Computes geodesic control from \delta \in H^\ast."""
        for i in range(self.__nb_module):
            self.__module_list[i].compute_geodesic_control(delta[self.__indice_controls[i]:self.__indice_controls[i+1]])

